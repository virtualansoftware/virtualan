/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package io.virtualan.virtualan.api;

import io.virtualan.virtualan.to.RiskFactorRequestDto;
import io.virtualan.virtualan.to.RiskFactorResponseDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.virtualan.annotation.ApiVirtual;
import io.virtualan.annotation.VirtualService;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-03-04T23:51:59.311440500-06:00[America/Chicago]")
@Validated
@Tag(name = "riskfactor", description = "the riskfactor API")
@VirtualService
public interface RiskfactorApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /riskfactor/compute : riskfactor
     *
     * @param riskFactorRequestDto riskfactor (required)
     * @return Expected response to a valid request (status code 200)
     */
    @ApiVirtual
    @Operation(
        operationId = "riskfactor",
        summary = "riskfactor",
        tags = { "riskfactor" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Expected response to a valid request", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  RiskFactorResponseDto.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/riskfactor/compute",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<RiskFactorResponseDto> riskfactor(
        @Parameter(name = "RiskFactorRequestDto", description = "riskfactor", required = true, schema = @Schema(description = "")) @Valid @RequestBody RiskFactorRequestDto riskFactorRequestDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"riskFactor\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
